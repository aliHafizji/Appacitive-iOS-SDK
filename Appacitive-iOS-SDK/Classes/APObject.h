//
//  APObject.h
//  Appacitive-iOS-SDK
//
//  Created by Kauserali Hafizji on 29/08/12.
//  Copyright (c) 2012 Appacitive Software Pvt. Ltd. All rights reserved.
//

#import "APResponseBlocks.h"

@class APError;

extern NSString *const ARTICLE_PATH;

/**
 This class is used to represent an Article.
 An Article represents an instance of a Schema.
 */
@interface APObject : NSObject

/**
 This property is used for user management, used to define the user who created this article.
 If no value is specified it defaults to "TestUser"
 */
@property (nonatomic, strong, readonly) NSString *createdBy;

/**
 This property represents the article Id.
 Saving and article sets this property to the id generated by the system.
 */
@property (nonatomic, strong) NSNumber *objectId;

/**
 This property is used to represent the last user who changed this article.
 If no value is specified it defaults to "TestUser"
 */
@property (nonatomic, strong, readonly) NSString *lastUpdatedBy;

/**
 UTC date when the article was created.
 */
@property (nonatomic, strong, readonly) NSDate *utcDateCreated;

/**
 UTC date when the article was last updated.
 */
@property (nonatomic, strong, readonly) NSDate *utcLastUpdatedDate;

/**
 Species the revision of the article.
 This can be used while update/delete.
 */
@property (nonatomic, strong, readonly) NSNumber *revision;

/**
 An array of key value pairs.
 These are the properties defined in the schema.
 These are validated against the schema.
 */
@property (nonatomic, strong, readonly) NSMutableArray *properties;

/**
 An array of key value pairs. 
 This is used to store extra information in an article.
 */
@property (nonatomic, strong, readonly) NSMutableArray *attributes;

/**
 Represents the schemaId of the article.
 Either a schemaType or schemaId is required to save an article.
 */
@property (nonatomic, strong) NSNumber *schemaId;

/**
 Represents the schemaType/name of the article.
 Either a schemaType or schemaId is required to save an article.
 */
@property (nonatomic, strong) NSString *schemaType;

/**
 Articles can be tagged. This can be used while searching.
 */
@property (nonatomic, strong) NSArray *tags;

/**
 Initialize and return an autoreleased AYObject targetting a particular schema.
 
 @param schemaName The name of the schema this article represents.
 */
+ (id) objectWithSchemaName:(NSString*)schemaName;

/**
 Initialize and return an autorelease AYObject targetting a particular schema.
 
 @param schemaName The name of the schema this article represents.
 */
- (id) initWithSchemaName:(NSString*)schemaName;

/**
 Search for all objects of a particular schema
 @param schemaName The schema that the objects should belong to
 @param successHandler Block invoked when search call is successful
 */
+ (void) searchForAllObjectsWithSchemaName:(NSString*) schemaName successHandler:(APResultSuccessBlock)successHandler;

/**
 Search for all objects of a particular schema
 @param schemaName The schema that the objects should belong to
 @param successHandler Block invoked when search call is successful
 @param failureBlock Block invoked when search call fails
 */
+ (void) searchForAllObjectsWithSchemaName:(NSString*) schemaName successHandler:(APResultSuccessBlock)successHandler failureHandler:(APFailureBlock)failureBlock;

/**
 Search for APObjects stored at the remote server
 
 @param schemaName The schema that the objects should belong to
 @param queryString SQL kind of query to search for specific objects
 @param successHandler Block invoked when search call is successful
 */
+ (void) searchForObjectsWithSchemaName:(NSString*)schemaName withQueryString:(NSString*)queryString successHandler:(APResultSuccessBlock)successBlock;

/**
 Search for APObjects stored at the remote server
 
 @param schemaName The schema that the objects should belong to
 @param queryString SQL kind of query to search for specific objects
 @param successHandler Block invoked when search call is successful
 @param failureHandler Block invoked when search call fails
 */
+ (void) searchForObjectsWithSchemaName:(NSString*)schemaName withQueryString:(NSString*)queryString successHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Multi delete method used to delete a number of objects.
 
 @param objectIds The ids of the objects to delete.
 @param schemaName The schema that the objects belong to.
 @param failureBlock Block invoked when multi delete operation fails.
 */
+ (void) deleteObjectsWithIds:(NSArray*)objectIds schemaName:(NSString*)schemaName failureHandler:(APFailureBlock)failureBlock;

/**
 Multi delete method used to delete a number of objects.
 
 @param objectIds The ids of the objects to delete.
 @param schemaName The schema that the objects belong to.
 @param successBlock Block invoked when multi delete operation succeeds
 @param failureBlock Block invoked when multi delete operation fails.
 */
+ (void) deleteObjectsWithIds:(NSArray*)objectIds schemaName:(NSString*)schemaName successHandler:(APSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;


/**
 Method used to retrieve an article of a particular schema.
 
 @param objectId The id of the object to retrieve
 @param schemaName The schema name the object belongs to.
 @param successBlock Block invoked when retrieve operation succeeds.
 @param failureBlock Block invoked when retrieve operation fails.
 */
+ (void) fetchObjectWithObjectId:(NSNumber*)objectId schemaName:(NSString*)schemaName successHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method used to retrieve multiple articles of a particular schema.
 
 @param objectIds The ids of the object to retrieve.
 @param schemaName The schema name the objects belong to.
 @param successBlock Block invoked when the retrieve operation succeeds.
 @param failureBlock Block invoked when the failure operation succeeds.
 */
+ (void) fetchObjectsWithObjectIds:(NSArray*)objectIds schemaName:(NSString *)schemaName successHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method used to fetch an article.
 
 @discussion This method will use the schemaType and objectId properties to fetch the article. If the objectId and schemaType is not set, results are unexpected.
 */
- (void) fetch;

/**
 Method used to fetch an article.
 
 @param failureBlock Block invoked when fetch operation fails.
 
 @discussion This method will use the schemaType and objectId properties to fetch the article. If the objectId and schemaType is not set, results are unexpected.
 */
- (void) fetchWithFailureHandler:(APFailureBlock)failureBlock;

/**
 Method used to add a property to the article.
 The properties are validated agains the schema.
 
 @discussion This method allows creation of on single key:value pair. For multiple see the - addProperty: method.
 @param keyName
 @param object
 */
- (void) addPropertyWithKey:(NSString*) keyName value:(id) object;

/**
 Method used to add multiple key-value pairs.
 
 @param property An NSDictionary, this can have n number of key-value pairs.
 */
- (void) addProperty:(NSDictionary*)property;

/**
 Method used to add an attibute to the article.
 Articles are used to store extra information.
 
 @param keyName
 @param object
 */
- (void) addAttributeWithKey:(NSString*) keyName value:(id) object;

/**
 Method to save an article.
 
 @discussion This method will save an article in the background. If save is successful the properties will be updated.
 */
- (void) saveObject;

/**
 Method to save an article.
 
 @param failureBlock Block invoked when save operation fails.
 
 @discussion This method will save an article in the background. If save is successful the properties will be updated. If not the failure block is invoked.
 */
- (void) saveObjectWithFailureHandler:(APFailureBlock)failureBlock;

/**
 Method to save an article.
 
 @param successBlock Block invoked when save operation is successful
 @param failureBlock Block invoked when save operation fails.
 
 @discussion This method will save an article in the background. If save is successful the properties will be updated and the successBlock is invoked. If not the failure block is invoked.
 */
- (void) saveObjectWithSuccessHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to delete an object.
 
 @discussion delete operation happend in the background without disturbing the UI thread.
 */
- (void) deleteObject;

/**
 Method to delete an object.
 
 @param failureBlock Block invoked when delete operation fails.
 */
- (void) deleteObjectWithFailureHandler:(APFailureBlock)failureBlock;

/**
 Method to delete an object.
 
 @param successBlock Block invoked when delete operation is successful
 @param failureBlock Block invoked when delete operation fails.
 */
- (void) deleteObjectWithSuccessHandler:(APSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to filter articles according to the query provided.
 
 @discussion A filter query does not have a starting point in the graph. All the articles that satisfy the query will be returned. To know more visit http://wwww.appacitive.com
 
 @param query
 @param successBlock Block invoked when query is successfully executed.
 */
+ (void) applyFilterGraphQuery:(NSString*)query successHandler:(APResultSuccessBlock)successBlock;

/**
 Method to filter articles according to the query provided.
 
 @discussion A filter query does not have a starting point in the graph. All the articles that satisfy the query will be returned. To know more visit http://wwww.appacitive.com
 
 @param query
 @param successBlock Block invoked when query is successfully executed.
 @param failureBlock Block invoked when query execution fails.
 */
+ (void) applyFilterGraphQuery:(NSString*)query successHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 This method applies a projection query. 
 
 @discussion A projection query will apply the query from a starting point in the graph. To know more visit http://wwww.appacitive.com
 
 @param query
 @param successBlock Block invoked when query is successfully executed.
 */
+ (void) applyProjectionGraphQuery:(NSString*)query successHandler:(APResultSuccessBlock)successBlock;

/**
 This method applies a projection query. 
 
 @discussion A projection query will apply the query from a starting point in the graph. To know more visit http://wwww.appacitive.com
 
 @param query
 @param successBlock Block invoked when query is successfully executed.
 @param failureBlock Block invoked when query execution fails.
 */
+ (void) applyProjectionGraphQuery:(NSString *)query successHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;
@end

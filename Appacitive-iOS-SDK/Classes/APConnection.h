//
//  APConnection.h
//  Appacitive-iOS-SDK
//
//  Created by Kauserali Hafizji on 03/09/12.
//  Copyright (c) 2012 Appacitive Software Pvt. Ltd.. All rights reserved.
//

#import "APResponseBlocks.h"

@class APObject;

/**
 This class is used to represent a Connection.
 A Connection is the edge of a graph and is used to join two articles.
 A Connection itself can store data in its properties and attributes, this data usually is specific to the connection.
 */
@interface APConnection : NSObject

/**
 This property is used for user management, used to define the user who created this article.
 If no value is specified it defaults to "TestUser"
 */
@property (nonatomic, strong, readonly) NSString *createdBy;

/**
 The objectId of the article on one side of the relation.
 */
@property (nonatomic, strong) NSNumber *articleAId;

/**
 The objectId of the article on one side of the relation.
 */
@property (nonatomic, strong) NSNumber *articleBId;

/**
 This property represents the connection Id.
 Creating a connection sets this property to the id generated by the system.
 */
@property (nonatomic, strong) NSNumber *objectId;

/**
 This property represents the label at one side of the connection.
 This is a mandatory field to create a connection.
 */
@property (nonatomic, strong) NSString *labelA;

/**
 This property represents the label at one side of the connection.
 This is a mandatory field to create a connection.
 */
@property (nonatomic, strong) NSString *labelB;

/**
 Represents the relationId. This is created while creating the blueprint.
 Either relationId or relationName is required to do anything with a connection object.
 */
@property (nonatomic, strong) NSNumber *relationId;

/**
 Represents the relationName. This is created while creating the blueprint.
 Either the relationId or relationName is required to do anything with a conneciton object.
 */
@property (nonatomic, strong) NSString *relationName;

/**
 This property is used to represent the last user who changed this connection.
 If no value is specified it defaults to "TestUser"
 */
@property (nonatomic, strong, readonly) NSString *lastUpdatedBy;

/**
 UTC date when the connection was created.
 */
@property (nonatomic, strong, readonly) NSDate *utcDateCreated;

/**
 UTC date when the connection was last updated.
 */
@property (nonatomic, strong, readonly) NSDate *utcLastUpdatedDate;

/**
 Species the revision of the connection.
 This can be used when update/delete.
 */
@property (nonatomic, strong, readonly) NSNumber *revision;

/**
 An array of key value pairs.
 These are the properties defined in the schema.
 These are validated against the schema.
 */
@property (nonatomic, strong, readonly) NSMutableArray *properties;

/**
 An array of key value pairs. 
 This is used to store extra information in an article.
 */
@property (nonatomic, strong, readonly) NSMutableArray *attributes;

/**
 Connections can be tagged. This can be used while searching.
 */
@property (nonatomic, strong) NSArray *tags;

/**
 Initialize and return an autorelease Connection targetting a specific relation.
 
 @param relationName The name of the relation. This is specified while creating the schema.
 */
+ (id) connectionWithRelationName:(NSString*)relationName;

/**
 Initialize and return an autorelease Connection targetting a specific relation.
 
 @param relationName The name of the relation. This is specified while creating the schema.
 */
- (id) initWithRelationName:(NSString*)relationName;

/**
 Search for all connections of a particular relation type
 
 @param relationName The relation that the connections should belong to
 @param successHandler Block invoked when search call is successful
 */
+ (void) searchForAllConnectionsWithRelationName:(NSString*)relationName successHandler:(APResultSuccessBlock)successHandler;

/**
 Search for all connections of a particular relation type
 
 @param relationName The relation that the connections should belong to
 @param successHandler Block invoked when search call is successful
 @param failureBlock Block invoked when search call fails
 */
+ (void) searchForAllConnectionsWithRelationName:(NSString*)relationName successHandler:(APResultSuccessBlock)successHandler failureHandler:(APFailureBlock)failureBlock;

/**
 Search for APConnections stored at the remote server
 
 @param relationName The relation that the connections should belong to
 @param queryString SQL kind of query to search for specific connections
 @param successHandler Block invoked when search call is successful
 */
+ (void) searchForConnectionsWithRelationName:(NSString*)relationName withQueryString:(NSString*)queryString successHandler:(APResultSuccessBlock)successBlock;

/**
 Search for APConnections stored at the remote server
 
 @param relationName The relation that the connections should belong to
 @param queryString SQL kind of query to search for specific objects
 @param successHandler Block invoked when search call is successful
 @param failureHandler Block invoked when search call fails
 */
+ (void) searchForConnectionsWithRelationName:(NSString*)relationName withQueryString:(NSString*)queryString successHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to create a relation.
 This method requires the articleAId, articleBId, labelA and labelB properties to be set.
 */
- (void) create;

/**
 Method to create a relation.
 This method requires the articleAId, articleBId, labelA and labelB properties to be set.
 
 @param failureBlock Block invoked when create operation fails.
 */
- (void) createConnectionWithFailureHandler:(APFailureBlock)failureBlock;

/**
 Method to create a relation.
 This method requires the articleAId, articleBId, labelA and labelB properties to be set.
 
 @param successBlock Block invoked when create operation is successful.
 @param failureBlock Block invoked when create operation fails.
 */
- (void) createConnectionWithSuccessHandler:(APSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to create a relation.
 This method will set labelA and labelB as the schemaName of objectA and objectB.
 
 @param objectA The article to create a connection from.
 @param objectB The article to create a connection to.
 */
- (void) createConnectionWithObjectA:(APObject*)objectA objectB:(APObject*)objectB;

/**
 Method to create a relation.
 This method will set labelA and labelB as the schemaName of objectA and objectB.
 
 @param objectA The article to create a connection from.
 @param objectB The article to create a connection to.
 @param failureBlock Block invoked when the create operation fails.
 */
- (void) createConnectionWithObjectA:(APObject*)objectA objectB:(APObject*)objectB failureHandler:(APFailureBlock)failureBlock;

/**
 Method to create a relation.
 This method will set labelA and labelB as the schemaName of objectA and objectB.
 
 @param objectA The article to create a connection from.
 @param objectB The article to create a connection to.
 @param successBlock Block invoked when the create operation is successful.
 @param failureBlock Block invoked when the create operation fails.
 */
- (void) createConnectionWithObjectA:(APObject*)objectA objectB:(APObject*)objectB successHandler:(APSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to create a relation.
 
 @param objectA The article to create a connection from.
 @param objectB The article to create a connection to.
 @param labelA The label at the starting vertex of the connection.
 @param lablelB The label at the end vertex of the connection.
 */
- (void) createConnectionWithObjectA:(APObject*)objectA objectB:(APObject*)objectB labelA:(NSString*)labelA labelB:(NSString*)labelB;

/**
 Method to create a relation.
 
 @param objectA The article to create a connection from.
 @param objectB The article to create a connection to.
 @param labelA The label at the starting vertex of the connection.
 @param lablelB The label at the end vertex of the connection.
 @param failureHandler Block invoked when create operation fails.
 */
- (void) createConnectionWithObjectA:(APObject*)objectA objectB:(APObject*)objectB labelA:(NSString*)labelA labelB:(NSString*)labelB failureHandler:(APFailureBlock)failureBlock;

/**
 Method to create a relation.
 
 @param objectA The article to create a connection from.
 @param objectB The article to create a connection to.
 @param labelA The label at the starting vertex of the connection.
 @param lablelB The label at the end vertex of the connection.
 @param successBlock Block invoked when create operation is successful.
 @param failureBlock Block invoked when create operation fails.
 */
- (void) createConnectionWithObjectA:(APObject*)objectA objectB:(APObject*)objectB labelA:(NSString*)labelA labelB:(NSString*)labelB successHandler:(APSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to create a relation.
 
 @param objectAId The id of the article to create a connection from.
 @param objectBId The id of the article to create a connection to.
 @param labelA The label at the starting vertex of the connection.
 @param labelB The label at the end vertex of the connection.
 */
- (void) createConnectionWithObjectAId:(NSNumber*)objectAId objectBId:(NSNumber*)objectBId labelA:(NSString*)labelA labelB:(NSString*)labelB;

/**
 Method to create a relation.
 
 @param objectAId The id of the article to create a connection from.
 @param objectBId The id of the article to create a connection to.
 @param labelA The label at the starting vertex of the connection.
 @param labelB The label at the end vertex of the connection.
 @param failureHandler Block invoked when create operation fails.
 */
- (void) createConnectionWithObjectAId:(NSNumber*)objectAId objectBId:(NSNumber*)objectBId labelA:(NSString*)labelA labelB:(NSString*)labelB failureHandler:(APFailureBlock)failureBlock;

/**
 Method to create a relation.
 
 @param objectAId The id of the article to create a connection from.
 @param objectBId The id of the article to create a connection to.
 @param labelA The label at the starting vertex of the connection.
 @param labelB The label at the end vertex of the connection.
 @param successHandler Block invoked when create operation is successful.
 @param failureHandler Block invoked when create operation fails.
 */
- (void) createConnectionWithObjectAId:(NSNumber*)objectAId objectBId:(NSNumber*)objectBId labelA:(NSString*)labelA labelB:(NSString*)labelB successHandler:(APSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to fetch connections from the server.
 
 @param relationName The name of the relation. A connection of this relation name is retrieved.
 @param objectId The id of the connection to retrieve.
 @param successBlock Block invoked when fetch is successful. The block returns the results the form of a JSON.
 */
+ (void) fetchConnectionWithRelationName:(NSString*)relationName objectId:(NSNumber*)objectId successHandler:(APResultSuccessBlock)successBlock;

/**
 Method to fetch connections from the server.
 
 @param relationName The name of the relation. A connection of this relation name is retrieved.
 @param objectId The id of the connection to retrieve.
 @param successBlock Block invoked when fetch is successful. The block returns the results the form of a JSON.
 @param failureBlock Block invoked when fetch operation fails.
 */
+ (void) fetchConnectionWithRelationName:(NSString*)relationName objectId:(NSNumber*)objectId successHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to fetch multiple connection in one call.
 
 @param relationName The name of the relation. Connections of this relation name are retrieved.
 @param objectIds An array of objectIds to fetch.
 @param successBlock Block invoked when fetch is successful. The block returns the results in the form of a JSON.
 */
+ (void) fetchConnectionsWithRelationName:(NSString*)relationName objectIds:(NSArray*)objectIds successHandler:(APResultSuccessBlock)successBlock;

/**
 Method to fetch multiple connection in one call.
 
 @param relationName The name of the relation. Connections of this relation name are retrieved.
 @param objectIds An array of objectIds to fetch.
 @param successBlock Block invoked when fetch is successful. The block returns the results in the form of a JSON.
 @param failureBlock Block invoked when fetch operation fails.
 */
+ (void) fetchConnectionsWithRelationName:(NSString*)relationName objectIds:(NSArray*)objectIds successHandler:(APResultSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to delete multiple connections in one call.
 
 @param relationName The name of the relation. Connections of this relation name will be deleted.
 @param objectIds An array of objectId to delete.
 */
+ (void) deleteConnectionsWithRelationName:(NSString*)relationName objectIds:(NSArray*)objectIds;

/**
 Method to delete multiple connections in one call.
 
 @param relationName The name of the relation. Connections of this relation name will be deleted.
 @param objectIds An array of objectId to delete.
 @param failureBlock Block invoked when delete call fails.
 */
+ (void) deleteConnectionsWithRelationName:(NSString*)relationName objectIds:(NSArray*)objectIds failureHandler:(APFailureBlock)failureBlock;

/**
 Method to delete multiple connections in one call.
 
 @param relationName The name of the relation. Connections of this relation name will be deleted.
 @param objectIds An array of objectId to delete.
 @param successBlock Block invoked when delete call is successful.
 @param failureBlock Block invoked when delete call fails.
 */
+ (void) deleteConnectionsWithRelationName:(NSString*)relationName objectIds:(NSArray*)objectIds successHandler:(APSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;

/**
 Method to delete a connection.
 This method requires the relationName and objectId to be set.
 */
- (void) deleteConnection;

/**
 Method to delete a connection.
 This method requires the relationName and objectId to be set.
 
 @param failureBlock Block invoked when delete fails.
 */
- (void) deleteConnectionWithFailureHandler:(APFailureBlock)failureBlock;

/**
 Method to delete a connection.
 This method requires the relationName and objectId to be set.
 
 @param successBlock Block invoked when delete is successful.
 @param failureBlock Block invoked when delete fails.
 */
- (void) deleteConnectionWithSuccessHandler:(APSuccessBlock)successBlock failureHandler:(APFailureBlock)failureBlock;
@end
